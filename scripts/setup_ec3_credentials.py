#!/usr/bin/env python3
"""
EC3 API Credentials Setup Wizard

This interactive script helps you configure EC3 API authentication.

Usage:
    python scripts/setup_ec3_credentials.py
"""

import os
import sys
from pathlib import Path

# Add parent directory to path
sys.path.insert(0, str(Path(__file__).parent.parent))


def print_banner():
    """Print welcome banner"""
    print("=" * 80)
    print("EC3 API CREDENTIALS SETUP WIZARD")
    print("=" * 80)
    print()
    print("This wizard will help you configure authentication for EC3 API access.")
    print("You'll need an account at: https://buildingtransparency.org")
    print()


def print_auth_methods():
    """Print authentication method options"""
    print("Available authentication methods:")
    print()
    print("1. OAuth2 Password Grant (RECOMMENDED)")
    print("   - Full access to all endpoints")
    print("   - Uses your EC3 account credentials")
    print("   - Requires OAuth2 app setup")
    print("   - Best for automated extraction")
    print()
    print("2. API Key")
    print("   - Simple setup")
    print("   - May have limited endpoint access")
    print("   - Good for basic usage")
    print()
    print("3. Skip (use public access)")
    print("   - No authentication")
    print("   - Very limited data access")
    print("   - Most endpoints will return 401/404")
    print()


def get_oauth2_credentials():
    """Interactive prompt for OAuth2 credentials"""
    print("\n" + "=" * 80)
    print("OAUTH2 PASSWORD GRANT SETUP")
    print("=" * 80)
    print()
    print("First, you need to create an OAuth2 app:")
    print("1. Go to: https://buildingtransparency.org/ec3/manage-apps/")
    print("2. Click 'Create New Application'")
    print("3. Fill in the form:")
    print("   - Name: 'Mothra Data Extraction' (or any name)")
    print("   - Authorization grant type: 'Resource owner password-based'")
    print("   - Client type: 'Confidential'")
    print("4. Save and note your Client ID and Client Secret")
    print()

    input("Press Enter when you have your OAuth2 app credentials ready...")
    print()

    client_id = input("Enter OAuth2 Client ID: ").strip()
    if not client_id:
        print("‚ùå Client ID is required!")
        return None

    client_secret = input("Enter OAuth2 Client Secret: ").strip()
    if not client_secret:
        print("‚ùå Client Secret is required!")
        return None

    print()
    print("Now enter your EC3 account credentials:")
    username = input("Enter EC3 Username: ").strip()
    if not username:
        print("‚ùå Username is required!")
        return None

    password = input("Enter EC3 Password: ").strip()
    if not password:
        print("‚ùå Password is required!")
        return None

    scope = input("Enter OAuth2 Scope [default: read]: ").strip() or "read"

    return {
        "client_id": client_id,
        "client_secret": client_secret,
        "username": username,
        "password": password,
        "scope": scope,
    }


def get_api_key():
    """Interactive prompt for API key"""
    print("\n" + "=" * 80)
    print("API KEY SETUP")
    print("=" * 80)
    print()
    print("To get an API key:")
    print("1. Go to: https://buildingtransparency.org/ec3/manage-apps/keys")
    print("2. Click 'Generate New API Key'")
    print("3. Copy the key (you won't be able to see it again!)")
    print()

    input("Press Enter when you have your API key ready...")
    print()

    api_key = input("Enter EC3 API Key: ").strip()
    if not api_key:
        print("‚ùå API Key is required!")
        return None

    return api_key


def write_env_file(config):
    """Write configuration to .env.ec3 file"""
    env_file = Path(__file__).parent.parent / ".env.ec3"

    # Read example file for template
    example_file = Path(__file__).parent.parent / ".env.ec3.example"
    if not example_file.exists():
        print("‚ö†Ô∏è  Warning: .env.ec3.example not found, creating basic file")
        template = ""
    else:
        with open(example_file, "r") as f:
            template = f.read()

    with open(env_file, "w") as f:
        f.write("# EC3 API Credentials\n")
        f.write("# Generated by setup_ec3_credentials.py\n")
        f.write("# DO NOT commit this file to git!\n\n")

        if config["method"] == "oauth2":
            f.write("# OAuth2 Password Grant Configuration\n")
            f.write(f"EC3_OAUTH_CLIENT_ID={config['client_id']}\n")
            f.write(f"EC3_OAUTH_CLIENT_SECRET={config['client_secret']}\n")
            f.write(f"EC3_OAUTH_USERNAME={config['username']}\n")
            f.write(f"EC3_OAUTH_PASSWORD={config['password']}\n")
            f.write(f"EC3_OAUTH_SCOPE={config['scope']}\n")
        elif config["method"] == "api_key":
            f.write("# API Key Configuration\n")
            f.write(f"EC3_API_KEY={config['api_key']}\n")

    print(f"\n‚úÖ Configuration saved to: {env_file}")
    print()
    print("To use these credentials, load them into your environment:")
    print(f"    export $(cat {env_file} | grep -v '^#' | xargs)")
    print()
    print("Or use python-dotenv:")
    print("    from dotenv import load_dotenv")
    print("    load_dotenv('.env.ec3')")
    return env_file


def test_credentials():
    """Test the configured credentials"""
    print("\n" + "=" * 80)
    print("TESTING CREDENTIALS")
    print("=" * 80)
    print()

    import asyncio
    from mothra.agents.discovery.ec3_integration import EC3Client

    async def test():
        async with EC3Client() as client:
            print("üîÑ Validating credentials...")
            result = await client.validate_credentials()

            print()
            if result["valid"]:
                print("‚úÖ SUCCESS!")
                print(f"   Authentication Method: {result['auth_method']}")
                print(f"   Message: {result['message']}")
                if result.get("test_result"):
                    print(f"   Test Endpoint: {result['test_endpoint']}")
                    print(f"   Records Accessible: {result['test_result']['count']}")
            else:
                print("‚ùå FAILED!")
                print(f"   Authentication Method: {result['auth_method']}")
                print(f"   Message: {result['message']}")
                print()
                print("Please check your credentials and try again.")
                return False

            return True

    return asyncio.run(test())


def add_to_gitignore():
    """Ensure .env.ec3 is in .gitignore"""
    gitignore_file = Path(__file__).parent.parent / ".gitignore"

    if not gitignore_file.exists():
        with open(gitignore_file, "w") as f:
            f.write(".env.ec3\n")
        print("‚úÖ Created .gitignore with .env.ec3")
        return

    with open(gitignore_file, "r") as f:
        content = f.read()

    if ".env.ec3" not in content:
        with open(gitignore_file, "a") as f:
            if not content.endswith("\n"):
                f.write("\n")
            f.write(".env.ec3\n")
        print("‚úÖ Added .env.ec3 to .gitignore")
    else:
        print("‚úÖ .env.ec3 already in .gitignore")


def main():
    """Main setup wizard"""
    print_banner()

    # Check if credentials already exist
    env_file = Path(__file__).parent.parent / ".env.ec3"
    if env_file.exists():
        print(f"‚ö†Ô∏è  Existing credentials found at: {env_file}")
        overwrite = input("Do you want to overwrite? (yes/no): ").strip().lower()
        if overwrite not in ["yes", "y"]:
            print("Setup cancelled.")
            return
        print()

    print_auth_methods()

    while True:
        choice = input("Select authentication method (1/2/3): ").strip()

        if choice == "1":
            # OAuth2
            credentials = get_oauth2_credentials()
            if credentials:
                config = {
                    "method": "oauth2",
                    **credentials,
                }
                break
            else:
                print("\n‚ùå OAuth2 setup failed. Please try again.\n")
                continue

        elif choice == "2":
            # API Key
            api_key = get_api_key()
            if api_key:
                config = {
                    "method": "api_key",
                    "api_key": api_key,
                }
                break
            else:
                print("\n‚ùå API Key setup failed. Please try again.\n")
                continue

        elif choice == "3":
            # Skip
            print("\n‚ö†Ô∏è  Skipping authentication setup.")
            print("You'll have very limited access without credentials.")
            print()
            return

        else:
            print("‚ùå Invalid choice. Please enter 1, 2, or 3.")
            continue

    # Write configuration
    env_file = write_env_file(config)

    # Add to gitignore
    add_to_gitignore()

    # Test credentials
    print("\nWould you like to test the credentials now?")
    test = input("Test credentials? (yes/no): ").strip().lower()
    if test in ["yes", "y"]:
        # Load the .env.ec3 file
        try:
            from dotenv import load_dotenv
            load_dotenv(env_file)
            print("‚úÖ Loaded credentials from .env.ec3")
        except ImportError:
            print("‚ö†Ô∏è  python-dotenv not installed, loading manually...")
            # Manually load env vars
            with open(env_file, "r") as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith("#") and "=" in line:
                        key, value = line.split("=", 1)
                        os.environ[key] = value

        success = test_credentials()

        if success:
            print("\n" + "=" * 80)
            print("SETUP COMPLETE!")
            print("=" * 80)
            print()
            print("You're ready to extract EC3 data!")
            print()
            print("Try running:")
            print("    python scripts/extract_full_ec3_database.py --test")
            print()
        else:
            print("\n‚ö†Ô∏è  Setup complete but credential test failed.")
            print("Please verify your credentials and try again.")
    else:
        print("\n‚úÖ Setup complete!")
        print()
        print("Remember to load credentials before running extraction:")
        print(f"    export $(cat {env_file} | grep -v '^#' | xargs)")
        print()


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå Setup cancelled by user.")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå Setup failed with error: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
